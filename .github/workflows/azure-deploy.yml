name: "🚀 AZURE DEPLOYMENT: ML API to Azure Container Apps - V3.0 FINAL"

on:
  # 🎯 PRIMARY WORKFLOW V3.0 FINAL: This is the ONLY workflow that should run for Azure deployment - COMPLETE REFRESH
  push:
    branches: [ master, main ]
    paths:
      - 'notebooks/app.py'
      - 'requirements.txt'
      - 'Dockerfile'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: diabetesmlacr.azurecr.io
  IMAGE_NAME: diabetes-ml-api
  RESOURCE_GROUP: Muh_Azure_ML
  LOCATION: eastus2
  CONTAINER_APP_ENV: diabetes-ml-env
  CONTAINER_APP_NAME: diabetes-ml-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        # Simple Docker build without buildx
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        echo "✅ Docker image built and pushed successfully"

  deploy-to-azure:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure subscription
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Azure Container Apps extension
      run: |
        az extension add --name containerapp --upgrade

    - name: Deploy to Azure Container Apps
      run: |
        # Get ACR login server and credentials
        ACR_LOGIN_SERVER=$(az acr show --name diabetesmlacr --resource-group ${{ env.RESOURCE_GROUP }} --query loginServer --output tsv)
        ACR_USERNAME=$(az acr credential show --name diabetesmlacr --resource-group ${{ env.RESOURCE_GROUP }} --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name diabetesmlacr --resource-group ${{ env.RESOURCE_GROUP }} --query 'passwords[0].value' --output tsv)

        # Check if container app exists
        if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
          echo "📝 Updating existing container app..."

          # First, set the registry credentials
          az containerapp registry set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server $ACR_LOGIN_SERVER \
            --username $ACR_USERNAME \
            --password $ACR_PASSWORD

          # Then update the container app
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest \
            --target-port 8000 \
            --ingress external \
            --cpu 1.0 \
            --memory 2.0Gi \
            --min-replicas 1 \
            --max-replicas 3
        else
          echo "🚀 Creating new container app..."
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APP_ENV }} \
            --image $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest \
            --registry-server $ACR_LOGIN_SERVER \
            --registry-username $ACR_USERNAME \
            --registry-password $ACR_PASSWORD \
            --target-port 8000 \
            --ingress external \
            --cpu 1.0 \
            --memory 2.0Gi \
            --min-replicas 1 \
            --max-replicas 3
        fi

        # Get the FQDN
        FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn --output tsv)

        echo "🎉 Container app deployed successfully!"
        echo "🌐 URL: https://$FQDN"
        echo "📊 Health check: https://$FQDN/health"
        echo "📚 API docs: https://$FQDN/docs"

        # Set output for next steps
        echo "api_url=https://$FQDN" >> $GITHUB_OUTPUT

    - name: Test API endpoints
      run: |
        FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn --output tsv)

        echo "Waiting for API to be ready..."
        sleep 60

        echo "Testing health endpoint..."
        curl -f "https://$FQDN/health" || exit 1

        echo "Testing models endpoint..."
        curl -f "https://$FQDN/models" || exit 1

        echo "✅ All API endpoints are working!"

  security-scan:
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
