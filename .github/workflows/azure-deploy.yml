name: Azure Deploy with Security Scan

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - 'railway*.json'
      - 'Dockerfile.streamlit'
      - 'RAILWAY_*.md'
      - 'deploy-railway.sh'
      - 'test-railway-deployment.py'
  pull_request:
    branches: [ master, main ]
  # Manual trigger for Azure deployments
  workflow_dispatch:
    inputs:
      deploy_to_azure:
        description: 'Deploy to Azure'
        required: true
        default: false
        type: boolean

# Explicitly define permissions to fix security scan issues
permissions:
  contents: read
  security-events: write  # Required for security scans
  actions: read
  pull-requests: read

# Only run Azure deployment on specific commits
jobs:
  check-azure-deployment:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check if Azure deployment is needed
        id: check
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"Azure"* ]] || [[ "${{ github.event.head_commit.message }}" == *"azure"* ]] || [[ "${{ github.event.head_commit.message }}" == *"üöÄ Deploy"* ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Azure deployment triggered by commit message"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping Azure deployment - commit message doesn't mention Azure"
          fi

  build-and-push:
    needs: check-azure-deployment
    if: needs.check-azure-deployment.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name diabetesmlacr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: diabetesmlacr.azurecr.io/diabetes-readmission:latest
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

  deploy-to-azure:
    needs: [check-azure-deployment, build-and-push]
    if: needs.check-azure-deployment.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name diabetesmlacr

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          acrName: diabetesmlacr
          acrUsername: ${{ secrets.ACR_USERNAME }}
          acrPassword: ${{ secrets.ACR_PASSWORD }}
          containerAppName: diabetes-readmission-api
          containerAppEnvironment: diabetes-ml-env
          resourceGroup: ${{ secrets.RESOURCE_GROUP }}
          imageToDeploy: diabetesmlacr.azurecr.io/diabetes-readmission:latest
          targetPort: 8000
          ingress: external

  security-scan:
    runs-on: ubuntu-latest
    # Override permissions specifically for this job
    permissions:
      security-events: write  # Override for this job
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()  # Continue even if scan fails
        with:
          sarif_file: 'trivy-results.sarif'

  # Optional: Add testing job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests (if you have them)
        run: |
          echo "Running basic checks..."
          python -c "import pandas, numpy, sklearn, fastapi"
          echo "‚úÖ All core dependencies imported successfully"
