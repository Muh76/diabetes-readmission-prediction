name: "üöÄ AZURE DEPLOYMENT: ML API to Azure Container Apps - V3.0 FINAL"

on:
  # üéØ PRIMARY WORKFLOW V3.0 FINAL: This is the ONLY workflow that should run for Azure deployment - COMPLETE REFRESH
  push:
    branches: [ master, main ]
    paths:
      - 'notebooks/app.py'
      - 'requirements.txt'
      - 'Dockerfile'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: diabetesmlacr.azurecr.io
  IMAGE_NAME: diabetes-ml-api
  RESOURCE_GROUP: Muh_Azure_ML
  LOCATION: eastus2
  CONTAINER_APP_ENV: diabetes-ml-env
  CONTAINER_APP_NAME: diabetes-ml-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        # Force complete rebuild with new tag
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        IMAGE_TAG="v2.0-$TIMESTAMP"
        FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

        echo "üî® Building Docker image with tag: $IMAGE_TAG"
        echo "üì¶ Full image name: $FULL_IMAGE_NAME"

        # Clear Docker cache completely
        echo "üßπ Clearing Docker caches..."
        docker system prune -af
        docker builder prune -af

        # Build with no cache and proper tagging
        echo "üî® Building image with tag: $IMAGE_TAG"
        docker build --no-cache -t $FULL_IMAGE_NAME:$IMAGE_TAG .

        echo "üî® Building image with tag: latest"
        docker build --no-cache -t $FULL_IMAGE_NAME:latest .

        # Verify images were built
        echo "üìã Built images:"
        docker images | grep ${{ env.IMAGE_NAME }}

        echo "üì¶ Pushing images to Azure Container Registry..."
        echo "Pushing $IMAGE_TAG..."
        docker push $FULL_IMAGE_NAME:$IMAGE_TAG

        echo "Pushing latest..."
        docker push $FULL_IMAGE_NAME:latest

        # Verify images were pushed
        echo "‚úÖ Images pushed successfully!"
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-azure:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure subscription
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Azure Container Apps extension
      run: |
        az extension add --name containerapp --upgrade

    - name: Deploy to Azure Container Apps
      run: |
        # Get ACR login server and credentials
        ACR_LOGIN_SERVER=$(az acr show --name diabetesmlacr --resource-group ${{ env.RESOURCE_GROUP }} --query loginServer --output tsv)
        ACR_USERNAME=$(az acr credential show --name diabetesmlacr --resource-group ${{ env.RESOURCE_GROUP }} --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name diabetesmlacr --resource-group ${{ env.RESOURCE_GROUP }} --query 'passwords[0].value' --output tsv)

        echo "üîç ACR Details:"
        echo "Login Server: $ACR_LOGIN_SERVER"
        echo "Username: $ACR_USERNAME"
        echo "Password: [HIDDEN]"

        echo "üóëÔ∏è FORCE CLEANUP: Deleting existing container app to ensure fresh deployment..."
        if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
          echo "üö® FORCE DELETE: Removing old container app completely..."
          az containerapp delete --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --yes
          echo "‚è≥ Waiting for deletion to complete..."
          sleep 30
        else
          echo "‚ÑπÔ∏è No existing container app found, proceeding with creation..."
        fi

        echo "üöÄ Creating completely new container app with fresh image..."
        FULL_IMAGE_NAME="$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest"
        echo "üì¶ Using image: $FULL_IMAGE_NAME"

        az containerapp create \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --environment ${{ env.CONTAINER_APP_ENV }} \
          --image $FULL_IMAGE_NAME \
          --registry-server $ACR_LOGIN_SERVER \
          --registry-username $ACR_USERNAME \
          --registry-password $ACR_PASSWORD \
          --target-port 8000 \
          --ingress external \
          --cpu 1.0 \
          --memory 2.0Gi \
          --min-replicas 1 \
          --max-replicas 3

        # Get the FQDN
        FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn --output tsv)

        echo "üéâ Container app deployed successfully!"
        echo "üåê URL: https://$FQDN"
        echo "üìä Health check: https://$FQDN/health"
        echo "üìö API docs: https://$FQDN/docs"

        # Set output for next steps
        echo "api_url=https://$FQDN" >> $GITHUB_OUTPUT

    - name: Test API endpoints
      run: |
        FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn --output tsv)

        echo "Waiting for API to be ready (increased wait time for first deployment)..."
        sleep 120  # Wait 2 minutes for container to fully start

        echo "üîç DIAGNOSIS: Checking container logs to see why FastAPI is not responding..."
        echo "=== Container Logs ==="
        az containerapp logs show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --follow false | head -50

        echo "=== Container Status ==="
        az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.runningStatus

        echo "=== Container Configuration ==="
        az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress

        echo "Testing health endpoint with retries..."
        MAX_RETRIES=5
        RETRY_COUNT=0

        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."

          if curl -f --max-time 30 "https://$FQDN/health"; then
            echo "‚úÖ Health endpoint is working!"
            break
          else
            echo "‚ö†Ô∏è Health check failed, waiting 30 seconds before retry..."
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              sleep 30
            fi
          fi
        done

        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Health endpoint failed after $MAX_RETRIES attempts"
          echo "üîç FINAL DIAGNOSIS: Container is running but not responding to HTTP requests"
          echo "=== Final Container Logs (last 100 lines) ==="
          az containerapp logs show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --follow false | tail -100

          echo "=== Container App Full Status ==="
          az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties

          echo "üö® DEPLOYMENT FAILED: FastAPI application is not responding"
          echo "üí° Likely causes:"
          echo "   1. Model loading failure during startup"
          echo "   2. FastAPI app crash during initialization"
          echo "   3. Port binding issues"
          echo "   4. Missing Python dependencies"
          exit 1
        fi

        echo "Testing models endpoint..."
        if curl -f --max-time 30 "https://$FQDN/models"; then
          echo "‚úÖ Models endpoint is working!"
        else
          echo "‚ö†Ô∏è Models endpoint failed, but deployment is successful"
        fi

        echo "üéâ API deployment completed successfully!"
        echo "üåê Your ML API is live at: https://$FQDN"
        echo "üìä Health check: https://$FQDN/health"
        echo "üìö API docs: https://$FQDN/docs"

  security-scan:
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
